// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/point.proto

package point

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
// const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Pointservice service

func NewPointserviceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Pointservice service

type PointserviceService interface {
	CreateGoodPoints(ctx context.Context, in *PointsReq, opts ...client.CallOption) (*PointsRes, error)
}

type pointserviceService struct {
	c    client.Client
	name string
}

func NewPointserviceService(name string, c client.Client) PointserviceService {
	return &pointserviceService{
		c:    c,
		name: name,
	}
}

func (c *pointserviceService) CreateGoodPoints(ctx context.Context, in *PointsReq, opts ...client.CallOption) (*PointsRes, error) {
	req := c.c.NewRequest(c.name, "Pointservice.CreateGoodPoints", in)
	out := new(PointsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pointservice service

type PointserviceHandler interface {
	CreateGoodPoints(context.Context, *PointsReq, *PointsRes) error
}

func RegisterPointserviceHandler(s server.Server, hdlr PointserviceHandler, opts ...server.HandlerOption) error {
	type pointservice interface {
		CreateGoodPoints(ctx context.Context, in *PointsReq, out *PointsRes) error
	}
	type Pointservice struct {
		pointservice
	}
	h := &pointserviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Pointservice{h}, opts...))
}

type pointserviceHandler struct {
	PointserviceHandler
}

func (h *pointserviceHandler) CreateGoodPoints(ctx context.Context, in *PointsReq, out *PointsRes) error {
	return h.PointserviceHandler.CreateGoodPoints(ctx, in, out)
}
